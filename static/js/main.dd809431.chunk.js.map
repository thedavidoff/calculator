{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","number","setNumber","fakeNumber","setFakeNumber","expression","setExpression","operator","setOperator","fakeOperator","setFakeOperator","result","setResult","memory","setMemory","error","setError","buttonValues","numbers","operators","rightColumnButtons","handleClick","e","val","target","value","isNumber","includes","isOperator","String","parseFloat","toString","eval","toFixed","res","slice","isFinite","isNaN","equalSignPosition","indexOf","x","Number","prev","className","style","length","fontSize","map","disabled","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd809431.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  let [number, setNumber] = useState(\"0\");\r\n  let [fakeNumber, setFakeNumber] = useState(\"\");\r\n  let [expression, setExpression] = useState(\"\");\r\n  let [operator, setOperator] = useState(\"\");\r\n  let [fakeOperator, setFakeOperator] = useState(\"\");\r\n  let [result, setResult] = useState(null);\r\n  let [memory, setMemory] = useState(\"0\");\r\n  let [error, setError] = useState(false);\r\n\r\n  const buttonValues = [\"AC\", \"+/-\", \"%\", \"/\", \"mc\", \"mr\", \"m-\", \"m+\", \"7\", \"8\", \"9\", \"*\", \"4\", \"5\", \"6\", \"-\", \"1\", \"2\", \"3\", \"+\", \"0\", \".\", \"=\"];\r\n  const numbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"];\r\n  const operators = [\"+\", \"-\", \"*\", \"/\"];\r\n  const rightColumnButtons = [\"/\", \"m+\", \"*\", \"-\", \"+\", \"=\"];\r\n\r\n  const handleClick = e => {\r\n    let val = e.target.value;\r\n    let isNumber = numbers.includes(val); // if clicked on a number\r\n    let isOperator = operators.includes(val); // if clicked on a operator\r\n\r\n    switch (val) {\r\n      case \"AC\":\r\n        setNumber(\"0\");\r\n        setFakeNumber(\"\");\r\n        setExpression(\"\");\r\n        setOperator(\"\");\r\n        setFakeOperator(\"\");\r\n        setResult(null);\r\n        setMemory(\"0\");\r\n        setError(false);\r\n        return;\r\n      case \"+/-\":\r\n        if (fakeNumber) {\r\n          setResult(String(parseFloat(result.toString()) * -1));\r\n          return;\r\n        }\r\n        setNumber(String(parseFloat(number || result.toString()) * -1));\r\n        return;\r\n      case \"%\":\r\n        // eslint-disable-next-line no-eval\r\n        setNumber(String(parseFloat((eval(`${(number || result) / 100}`).toFixed(9).toString()))));\r\n        return;\r\n      case \"0\":\r\n        if (number === \"0\") {\r\n          return;\r\n        }\r\n        return;\r\n      case \".\":\r\n        if (number.includes(val)) { // if the number contains \".\"\r\n          return;\r\n        }\r\n        if (number === \"\") {\r\n          setNumber(\"0.\");\r\n          return;\r\n        }\r\n        setNumber(number + val);\r\n        return;\r\n      case \"=\":\r\n        setFakeNumber(number || fakeNumber || result);\r\n        if ((parseFloat(number) === 0 || !expression)) {\r\n          return;\r\n        }\r\n        if (expression.includes(\"=\")) {\r\n          // eslint-disable-next-line no-eval\r\n          let res = String(parseFloat(eval(`${result} ${fakeOperator} ${fakeNumber}`).toFixed(9).toString()));\r\n          setExpression(result + fakeOperator + fakeNumber + val);\r\n          setResult(res);\r\n          return;\r\n        }\r\n\r\n        // eslint-disable-next-line no-eval\r\n        let res = String(parseFloat(eval(`${result} ${expression.slice(-1)} ${number || result}`).toFixed(9).toString()));\r\n        if (isFinite(+res)) {\r\n          setNumber(\"\");\r\n          setExpression(expression + (number || result) + val);\r\n          setResult(res);\r\n          return;\r\n        }\r\n        setNumber(isNaN(+res) ? \"Ошибка\" : res);\r\n        setError(true);\r\n        return;\r\n      case \"mc\":\r\n        setMemory(\"0\");\r\n        return;\r\n      case \"mr\":\r\n        setNumber(memory);\r\n        return;\r\n      case \"m-\":\r\n        // eslint-disable-next-line no-eval\r\n        setMemory(String(parseFloat((eval(`${memory} - ${number || result}`).toFixed(9).toString()))));\r\n        return;\r\n      case \"m+\":\r\n        memory === \"0\" ? setMemory(number || result) :\r\n          // eslint-disable-next-line no-eval\r\n          setMemory(String(parseFloat((eval(`${memory} + ${number || result}`).toFixed(9).toString()))));\r\n        return;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (isNumber) {\r\n      setFakeNumber(\"\");\r\n      setOperator(\"\");\r\n      operator && setFakeOperator(operator);\r\n      number === \"\" && operator === \"\" && setResult(\"\");\r\n      if (number === \"0\" || \"\") { // if the number is equal to \"0\" or \"\" and clicked 1-9\r\n        setNumber(val);\r\n        return;\r\n      }\r\n      setNumber(number + val);\r\n      expression.slice(-1) === \"=\" && setExpression(\"\");\r\n      return;\r\n    }\r\n    if (isOperator) {\r\n      setOperator(val);\r\n      setFakeOperator(val);\r\n      if (val === operator) return;\r\n      if (expression.slice(-1) === \"=\") {\r\n        let equalSignPosition = expression.indexOf(\"=\") + 1;\r\n        let x = expression.slice(equalSignPosition);\r\n        setExpression(x + result + val);\r\n        return;\r\n      }\r\n      if (operator) {\r\n        setExpression(expression.slice(0, -1) + val);\r\n      } else {\r\n        setExpression(expression + parseFloat(Number(number || result).toFixed(9)).toString() + val);\r\n\r\n        number !== \"\" && setResult((prev) => {\r\n          if (prev) {\r\n            // eslint-disable-next-line no-eval\r\n            let res = String(parseFloat((eval(`${prev} ${expression.slice(-1) || val} ${number}`).toFixed(9).toString())));\r\n            if (isFinite(+res)) {\r\n              return res;\r\n            }\r\n            setResult(isNaN(+res) ? \"Ошибка\" : res);\r\n            setError(true);\r\n          } else {\r\n            // eslint-disable-next-line no-eval\r\n            return String(parseFloat((eval(number).toFixed(9).toString())));\r\n          }\r\n        })\r\n      }\r\n      number !== \"\" && setNumber(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"memory\">\r\n          {memory !== \"0\" ? `M: ${memory}` : null}\r\n        </div>\r\n        <div\r\n          className=\"number\"\r\n          style={(number.length > 8 || (result && result.length > 8)) ? {fontSize: 60 - (number.length || result.length) * 1.75} : null}\r\n        >\r\n          {number || result}\r\n        </div>\r\n        <div className=\"expression\">{expression.length > 30 ? (\"...\" + expression.slice(expression.length - 30)) : expression}</div>\r\n        <div className=\"buttonsWrapper\">\r\n          {buttonValues.map(val => (\r\n            <button\r\n              key={val}\r\n              value={val}\r\n              disabled={val !== \"AC\" ? error : false}\r\n              className={rightColumnButtons.includes(val) ? \"rightColumnButton\" : null}\r\n              onClick={handleClick}\r\n            >\r\n              {val === \"*\" ? \"×\" : val}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        <div className=\"bottomLine\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}